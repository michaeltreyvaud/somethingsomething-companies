AWSTemplateFormatVersion: '2010-09-09'
Description: Core Infrastructre for a specific Company
Parameters:
  CompanyName:
    Description: The name of the Company
    Type: String
    MinLength: 3
    AllowedPattern: "[a-zA-Z0-9]+"
  CompanyFridgeTableReadThroughput:
    Description: The Fridge table read throughput
    Type: String
    Default: '5'
  CompanyFridgeTableWriteThroughput:
    Description: The Fridge table write throughput
    Type: String
    Default: '5'
Resources:
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}AuthLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  AuthLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}AuthLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}AuthLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}AuthLambda*:*
        - Effect: Allow
          Action:
          - apigateway:POST
          - apigateway:GetResources
          - apigateway:DELETE
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - cognito-idp:*
          Resource:
          - "*"
      Roles:
      - !Ref AuthLambdaRole
  FridgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}FridgeLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  FridgeLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}FridgeLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FridgeLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FridgeLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeTable/*
      Roles:
      - !Ref FridgeLambdaRole
  AuthLambda:
    DependsOn:
    - AuthLambdaRole
    - AuthLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Auth Lambda
      Environment:
        Variables:
          NODE_ENV: production
          APP_CLIENT_ID: !Ref CompanyUserPoolClient
          USER_POOL_ID: !Ref CompanyUserPool
      FunctionName: !Sub "${CompanyName}AuthLambda"
      Handler: src/AuthLambda/main.handler
      Role: !GetAtt AuthLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  AuthLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  FridgeLambda:
    DependsOn:
    - FridgeLambdaRole
    - FridgeLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Fridge Lambda
      Environment:
        Variables:
          NODE_ENV: production
          FRIDGE_TABLE: !Ref CompanyFridgeTable
      FunctionName: !Sub "${CompanyName}FridgeLambda"
      Handler: src/FridgeLambda/main.handler
      Role: !GetAtt FridgeLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  FridgeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FridgeLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  CompanyRootApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${CompanyName}Api"
      Description: Api Gateway for a specific Company
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: auth
  AuthLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: login
  AuthForgotPasswordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: forgot
  AuthChallengeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: challenge
  FridgeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: fridge
  FridgeResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref FridgeResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  AuthLoginMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthForgotPasswordMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthForgotPasswordResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthChallengeMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthChallengeResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  FridgeMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FridgeResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FridgeLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthLoginOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthForgotPasswordOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthForgotPasswordResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthChallengeOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthChallengeResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  FridgeOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FridgeResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  AuthMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: "method.request.header.Authorization"
      Name: !Sub ${CompanyName}ApiGatewayAuthorizer
      ProviderARNs:
        - !GetAtt CompanyUserPool.Arn
      RestApiId: !Ref CompanyRootApi
      Type: "COGNITO_USER_POOLS"
  ApiGatewayDeployment:
    DependsOn:
    - AuthResource
    - AuthMethods
    - AuthOptions
    - AuthLoginResource
    - AuthLoginMethods
    - AuthLoginOptions
    - AuthForgotPasswordResource
    - AuthForgotPasswordMethods
    - AuthForgotPasswordOptions
    - AuthChallengeResource
    - AuthChallengeMethods
    - AuthChallengeOptions
    - FridgeResource
    - FridgeMethods
    - FridgeMethods
    - FridgeResourceProxy
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CompanyRootApi
      StageName: dev
  CompanyUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub ${CompanyName}UserPool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      UsernameAttributes: ["email"]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: SomethingSomething - Account Created
          EmailMessage: !Sub "<html>\
            <body>\
            <p>Hi,</p>\
            <p>Your new SomethingSomething account has been set up. When you first login, you will be asked to reset your password.</p>\
            <br/>\
            <p>Username: {username}</p>\
            <p>Organization: ${CompanyName}</p>\
            <p>Temporary Password: {####}</p>\
            <br/>\
            <p>Login using this link: <a href=\"https://google.com\">Login/a><p>\
            <br/>\
            <p>Regards</p>\
            <p>SomethingSomething Team</p>\
            </body>\
            </html>"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: firstname
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: lastname
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: phonenumber
          AttributeDataType: Number
          Mutable: true
          Required: false
      EmailVerificationSubject: SomethingSomething - Password Reset
      EmailVerificationMessage: "<html>\
        <body>\
        <p>Hi,</p>\
        <p>A password reset has been requested for this account. If you did not request a password reset, please ignore this message.</p>\
        <br/>\
        <p>To reset your password, please enter the following code into the verification code prompt: {####}</p>\
        <br/>\
        <p>Regards</p>\
        <p>SomethingSomething Team</p>\
        </body>\
        </html>"
  CompanyUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${CompanyName}UserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref CompanyUserPool
      ExplicitAuthFlows: ["ADMIN_NO_SRP_AUTH"]
  CompanyIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${CompanyName}IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CompanyUserPoolClient
          ProviderName: !GetAtt CompanyUserPool.ProviderName
  CompanyAuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CompanyIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub ${CompanyName}AuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:Get*
                Resource: "*"
  CompanyUnAuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CompanyIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub ${CompanyName}UnAuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:Get*
                Resource: "*"
  CompanyIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CompanyIdentityPool
      Roles:
        authenticated: !GetAtt CompanyAuthenticatedRole.Arn
        unauthenticated: !GetAtt CompanyUnAuthenticatedRole.Arn
  CompanyFridgeTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FridgeTable
      AttributeDefinitions:
      -
        AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      -
        AttributeName: "id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFridgeTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFridgeTableWriteThroughput
