AWSTemplateFormatVersion: '2010-09-09'
Description: Core Infrastructre for a specific Company
Parameters:
  CompanyName:
    Description: The name of the Company
    Type: String
    MinLength: 3
    AllowedPattern: "[a-zA-Z0-9]+"
  CompanyFridgeTableReadThroughput:
    Description: The Fridge table read throughput
    Type: String
    Default: '5'
  CompanyFridgeTableWriteThroughput:
    Description: The Fridge table write throughput
    Type: String
    Default: '5'
  CompanyFridgeTaskTableReadThroughput:
    Description: The Fridge Task table read throughput
    Type: String
    Default: '5'
  CompanyFridgeTaskTableWriteThroughput:
    Description: The Fridge Task table write throughput
    Type: String
    Default: '5'
  CompanyFridgeLogTableReadThroughput:
    Description: The Fridge Log table read throughput
    Type: String
    Default: '5'
  CompanyFridgeLogTableWriteThroughput:
    Description: The Fridge Log table write throughput
    Type: String
    Default: '5'
  CompanyFreezerTableReadThroughput:
    Description: The Freezer table read throughput
    Type: String
    Default: '5'
  CompanyFreezerTaskTableReadThroughput:
    Description: The Freezer Task table read throughput
    Type: String
    Default: '5'
  CompanyFreezerTaskTableWriteThroughput:
    Description: The Freezer Task table write throughput
    Type: String
    Default: '5'
  CompanyFreezerLogTableReadThroughput:
    Description: The Freezer Log table read throughput
    Type: String
    Default: '5'
  CompanyFreezerLogTableWriteThroughput:
    Description: The Freezer Log table write throughput
    Type: String
    Default: '5'
  CompanyFreezerTableWriteThroughput:
    Description: The Freezer table write throughput
    Type: String
    Default: '5'
  CompanyFoodItemTableReadThroughput:
    Description: The FoodItem table read throughput
    Type: String
    Default: '5'
  CompanyFoodItemTableWriteThroughput:
    Description: The FoodItem table write throughput
    Type: String
    Default: '5'
  CompanyHotHoldingTableReadThroughput:
    Description: The HotHolding table write throughput
    Type: String
    Default: '5'
  CompanyHotHoldingTableWriteThroughput:
    Description: The HotHolding table write throughput
    Type: String
    Default: '5'
  CompanyFastCoolingTableReadThroughput:
    Description: The FastCooling table write throughput
    Type: String
    Default: '5'
  CompanyFastCoolingTableWriteThroughput:
    Description: The FastCooling table write throughput
    Type: String
    Default: '5'
  CompanySupplierTableReadThroughput:
    Description: The Supplier table write throughput
    Type: String
    Default: '5'
  CompanySupplierTableWriteThroughput:
    Description: The Supplier table write throughput
    Type: String
    Default: '5'
  CompanyUserMedicalLogTableReadThroughput:
    Description: The User Medical Log table write throughput
    Type: String
    Default: '5'
  CompanyUserMedicalLogTableWriteThroughput:
    Description: The User Medical Log table write throughput
    Type: String
    Default: '5'
  CompanyUserTrainingLogTableReadThroughput:
    Description: The User Training Log table write throughput
    Type: String
    Default: '5'
  CompanyUserTrainingLogTableWriteThroughput:
    Description: The User Training Log table write throughput
    Type: String
    Default: '5'
  CompanyContactEmail:
    Type: String
  CompanyContactFirstName:
    Type: String
  CompanyContactLastName:
    Type: String
  CompanyContactPhoneNumber:
    Type: String
  CompanyContactMobileNumber:
    Type: String
  CompanyCountry:
    Type: String
  CompanyCity:
    Type: String
  CompanyAddressLine1:
    Type: String
    Default: ""
  CompanyAddressLine2:
    Type: String
    Default: ""
  CompanyAddressLine3:
    Type: String
    Default: ""
  CompanyLogoUrl:
    Type: String
    Default: ""
Resources:
  CompanyProfileInformationSSM:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "CompanyProfileInformation"
      Description: "Company profile information"
      Type: "String"
      Value: !Sub |
        {
          "name": "${CompanyName}",
          "email": "${CompanyContactEmail}",
          "firstName": "${CompanyContactFirstName}",
          "lastName": "${CompanyContactLastName}",
          "phone": "${CompanyContactPhoneNumber}",
          "mobile": "${CompanyContactMobileNumber}",
          "country": "${CompanyCountry}",
          "city": "${CompanyCity}",
          "address1": "${CompanyAddressLine1}",
          "address2": "${CompanyAddressLine2}",
          "address3": "${CompanyAddressLine3}",
          "logo": "${CompanyLogoUrl}"
        }
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}AuthLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  AuthLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}AuthLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}AuthLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}AuthLambda*:*
        - Effect: Allow
          Action:
          - apigateway:POST
          - apigateway:GetResources
          - apigateway:DELETE
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - cognito-idp:*
          Resource:
          - "*"
      Roles:
      - !Ref AuthLambdaRole
  HotHoldingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}HotHoldingLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  HotHoldingLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}HotHoldingLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}HotHoldingLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}HotHoldingLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}HotHoldingTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}HotHoldingTable/*
      Roles:
      - !Ref HotHoldingLambdaRole
  FastCoolingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}FastCoolingLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  FastCoolingLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}FastCoolingLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FastCoolingLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FastCoolingLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FastCoolingTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FastCoolingTable/*
      Roles:
      - !Ref FastCoolingLambdaRole
  UserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}UserLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  UserLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}UserLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}UserLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}UserLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}UserMedicalLogTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}UserMedicalLogTable/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}UserTrainingLogTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}UserTrainingLogTable/*
        - Effect: Allow
          Action:
          - cognito-idp:*
          Resource:
          - "*"
      Roles:
      - !Ref UserLambdaRole
  UserLambda:
    DependsOn:
    - UserLambdaRole
    - UserLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company User Lambda
      Environment:
        Variables:
          NODE_ENV: production
          APP_CLIENT_ID: !Ref CompanyUserPoolClient
          USER_POOL_ID: !Ref CompanyUserPool
          USER_MEDICAL_LOG_TABLE: !Ref CompanyUserMedicalLogTable
          USER_TRANING_LOG_TABLE: !Ref CompanyUserTrainingLogTable
      FunctionName: !Sub "${CompanyName}UserLambda"
      Handler: src/UserLambda/main.handler
      Role: !GetAtt UserLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  UserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  FoodItemLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}FoodItemLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  FoodItemLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}FoodItemLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FoodItemLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FoodItemLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FoodItemTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FoodItemTable/*
      Roles:
      - !Ref FoodItemLambdaRole
  FoodItemLambda:
    DependsOn:
    - FoodItemLambdaRole
    - FoodItemLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company FoodItem Lambda
      Environment:
        Variables:
          NODE_ENV: production
          FOOD_ITEM_TABLE: !Ref CompanyFoodItemTable
          COMPANY_NAME: !Ref CompanyName
      FunctionName: !Sub "${CompanyName}FoodItemLambda"
      Handler: src/FoodItemLambda/main.handler
      Role: !GetAtt FoodItemLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  FoodItemLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FoodItemLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  HotHoldingLambda:
    DependsOn:
    - HotHoldingLambdaRole
    - HotHoldingLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company HotHolding Lambda
      Environment:
        Variables:
          NODE_ENV: production
          HOT_HOLDING_TABLE: !Ref CompanyHotHoldingTable
          COMPANY_NAME: !Ref CompanyName
      FunctionName: !Sub "${CompanyName}HotHoldingLambda"
      Handler: src/HotHoldingLambda/main.handler
      Role: !GetAtt HotHoldingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  HotHoldingLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HotHoldingLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  FastCoolingLambda:
    DependsOn:
    - FastCoolingLambdaRole
    - FastCoolingLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company FastCooling Lambda
      Environment:
        Variables:
          NODE_ENV: production
          FAST_COOLING_TABLE: !Ref CompanyFastCoolingTable
          COMPANY_NAME: !Ref CompanyName
      FunctionName: !Sub "${CompanyName}FastCoolingLambda"
      Handler: src/FastCoolingLambda/main.handler
      Role: !GetAtt FastCoolingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  FastCoolingLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FastCoolingLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  CompanyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}CompanyLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  CompanyLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}CompanyLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}CompanyLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}CompanyLambda*:*
        - Effect: Allow
          Action:
          - ssm:GetParameter
          - ssm:PutParameter
          Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CompanyProfileInformationSSM}
      Roles:
      - !Ref CompanyLambdaRole
  CompanyLambda:
    DependsOn:
    - CompanyLambdaRole
    - CompanyLambdaPolicy
    - CompanyProfileInformationSSM
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Settings Lambda
      Environment:
        Variables:
          NODE_ENV: production
          COMPANY_SETTINGS_SSM_PARAM: !Ref CompanyProfileInformationSSM
      FunctionName: !Sub "${CompanyName}CompanyLambda"
      Handler: src/CompanyLambda/main.handler
      Role: !GetAtt CompanyLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  CompanyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CompanyLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  FridgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}FridgeLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  FridgeLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}FridgeLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FridgeLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FridgeLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeTable/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeTaskTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeTaskTable/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeLogTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FridgeLogTable/*
      Roles:
      - !Ref FridgeLambdaRole
  FreezerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}FreezerLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  FreezerLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}FreezerLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FreezerLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}FreezerLambda*:*
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FreezerTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FreezerTable/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FreezerTaskTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FreezerTaskTable/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FreezerLogTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}FreezerLogTable/*
      Roles:
      - !Ref FreezerLambdaRole
  FreezerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}FreezerLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  ManagementLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${CompanyName}ManagementLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}ManagementLambda
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}ManagementLambda*:*
        - Effect: Allow
          Action:
          - cognito-idp:*
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}SupplierTable
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompanyName}SupplierTable/*
      Roles:
      - !Ref ManagementLambdaRole
  ManagementLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CompanyName}ManagementLambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  AuthLambda:
    DependsOn:
    - AuthLambdaRole
    - AuthLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Auth Lambda
      Environment:
        Variables:
          NODE_ENV: production
          APP_CLIENT_ID: !Ref CompanyUserPoolClient
          USER_POOL_ID: !Ref CompanyUserPool
      FunctionName: !Sub "${CompanyName}AuthLambda"
      Handler: src/AuthLambda/main.handler
      Role: !GetAtt AuthLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  AuthLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  FridgeLambda:
    DependsOn:
    - FridgeLambdaRole
    - FridgeLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Fridge Lambda
      Environment:
        Variables:
          NODE_ENV: production
          FRIDGE_TABLE: !Ref CompanyFridgeTable
          COMPANY_NAME: !Ref CompanyName
          FRIDGE_TASK_TABLE: !Ref CompanyFridgeTaskTable
          FRIDGE_LOG_TABLE: !Ref CompanyFridgeLogTable
      FunctionName: !Sub "${CompanyName}FridgeLambda"
      Handler: src/FridgeLambda/main.handler
      Role: !GetAtt FridgeLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  FridgeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FridgeLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  FreezerLambda:
    DependsOn:
    - FreezerLambdaRole
    - FreezerLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Freezer Lambda
      Environment:
        Variables:
          NODE_ENV: production
          FREEZER_TABLE: !Ref CompanyFreezerTable
          COMPANY_NAME: !Ref CompanyName
          FREEZER_TASK_TABLE: !Ref CompanyFreezerTaskTable
          FREEZER_LOG_TABLE: !Ref CompanyFreezerLogTable
      FunctionName: !Sub "${CompanyName}FreezerLambda"
      Handler: src/FreezerLambda/main.handler
      Role: !GetAtt FreezerLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  FreezerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FreezerLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  ManagementLambda:
    DependsOn:
    - ManagementLambdaRole
    - ManagementLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: somethingsomething-company-bucket
        S3Key: helloWorld.zip
      Description: Company Management Lambda
      Environment:
        Variables:
          NODE_ENV: production
          APP_CLIENT_ID: !Ref CompanyUserPoolClient
          USER_POOL_ID: !Ref CompanyUserPool
          SUPPLIER_TABLE: !Ref CompanySupplierTable
          COMPANY_NAME: !Ref CompanyName
      FunctionName: !Sub "${CompanyName}ManagementLambda"
      Handler: src/ManagementLambda/main.handler
      Role: !GetAtt ManagementLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  ManagementLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*
  CompanyRootApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${CompanyName}Api"
      Description: Api Gateway for a specific Company
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: auth
  AuthLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: login
  AuthForgotPasswordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: forgot
  AuthValidateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: validate
  AuthChallengeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: challenge
  FoodItemResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: fooditem
  FoodItemResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref FoodItemResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: user
  UserResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref UserResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  HotHoldingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: hotholding
  HotHoldingResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref HotHoldingResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  FastCoolingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: fastcooling
  FastCoolingResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref FastCoolingResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  FridgeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: fridge
  FridgeResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref FridgeResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  FreezerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: freezer
  FreezerResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref FreezerResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  ManagementResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: management
  ManagementResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ManagementResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  CompanyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CompanyRootApi.RootResourceId
      RestApiId: !Ref CompanyRootApi
      PathPart: company
  CompanyResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref CompanyResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  AuthLoginMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthForgotPasswordMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthForgotPasswordResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthValidateMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthValidateResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthChallengeMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthChallengeResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  FoodItemMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FoodItemResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FoodItemLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  UserMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref UserResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  HotHoldingMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref HotHoldingResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HotHoldingLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  FastCoolingMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FastCoolingResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FastCoolingLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  FridgeMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FridgeResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FridgeLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  FreezerMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FreezerResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FreezerLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  ManagementMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref ManagementResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManagementLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  CompanyMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref CompanyResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompanyLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthLoginOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthForgotPasswordOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthForgotPasswordResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthValidateOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthValidateResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthChallengeOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthChallengeResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  FoodItemOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FoodItemResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  UserOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref UserResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  HotHoldingOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref HotHoldingResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  FastCoolingOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FastCoolingResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  FridgeOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FridgeResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  FreezerOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref FreezerResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ManagementOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref ManagementResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  CompanyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref CompanyResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  AuthResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      RestApiId: !Ref CompanyRootApi
      PathPart: "{proxy+}"
  AuthMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthResourceProxy
      HttpMethod: POST
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      MethodResponses:
      - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: '200'
  AuthOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref CompanyRootApi
      ResourceId: !Ref AuthResourceProxy
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS,PATCH,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: "method.request.header.Authorization"
      Name: !Sub ${CompanyName}ApiGatewayAuthorizer
      ProviderARNs:
        - !GetAtt CompanyUserPool.Arn
      RestApiId: !Ref CompanyRootApi
      Type: "COGNITO_USER_POOLS"
  ApiGatewayDeployment:
    DependsOn:
    - AuthResource
    - AuthMethods
    - AuthOptions
    - AuthLoginResource
    - AuthLoginMethods
    - AuthLoginOptions
    - AuthForgotPasswordResource
    - AuthForgotPasswordMethods
    - AuthForgotPasswordOptions
    - AuthValidateResource
    - AuthValidateMethods
    - AuthValidateOptions
    - AuthChallengeResource
    - AuthChallengeMethods
    - AuthChallengeOptions
    - FridgeResource
    - FridgeMethods
    - FridgeMethods
    - FridgeResourceProxy
    - FreezerResource
    - FreezerMethods
    - FreezerMethods
    - FreezerResourceProxy
    - ManagementResource
    - ManagementMethods
    - ManagementMethods
    - ManagementResourceProxy
    - CompanyResource
    - CompanyMethods
    - CompanyMethods
    - CompanyResourceProxy
    - FoodItemResource
    - FoodItemMethods
    - FoodItemMethods
    - FoodItemResourceProxy
    - HotHoldingResource
    - HotHoldingMethods
    - HotHoldingMethods
    - HotHoldingResourceProxy
    - FastCoolingResource
    - FastCoolingMethods
    - FastCoolingMethods
    - FastCoolingResourceProxy
    - UserResource
    - UserMethods
    - UserMethods
    - UserResourceProxy
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CompanyRootApi
      StageName: dev
  CompanyUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub ${CompanyName}UserPool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      UsernameAttributes: ["email"]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: SomethingSomething - Account Created
          EmailMessage: !Sub "<html>\
            <body>\
            <p>Hi,</p>\
            <p>Your new SomethingSomething account has been set up. When you first login, you will be asked to reset your password.</p>\
            <br/>\
            <p>Username: {username}</p>\
            <p>Organization: ${CompanyName}</p>\
            <p>Temporary Password: {####}</p>\
            <br/>\
            <p>Login using this link: <a href=\"https://google.com\">Login/a><p>\
            <br/>\
            <p>Regards</p>\
            <p>SomethingSomething Team</p>\
            </body>\
            </html>"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: team
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: position
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: authorization
          AttributeDataType: String
          Mutable: true
          Required: false
      EmailVerificationSubject: SomethingSomething - Password Reset
      EmailVerificationMessage: "<html>\
        <body>\
        <p>Hi,</p>\
        <p>A password reset has been requested for this account. If you did not request a password reset, please ignore this message.</p>\
        <br/>\
        <p>To reset your password, please enter the following code into the verification code prompt: {####}</p>\
        <br/>\
        <p>Regards</p>\
        <p>SomethingSomething Team</p>\
        </body>\
        </html>"
  CompanyUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${CompanyName}UserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref CompanyUserPool
      ExplicitAuthFlows: ["ADMIN_NO_SRP_AUTH"]
  CompanyIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${CompanyName}IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CompanyUserPoolClient
          ProviderName: !GetAtt CompanyUserPool.ProviderName
  CompanyAuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CompanyIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub ${CompanyName}AuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:Get*
                Resource: "*"
  CompanyUnAuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CompanyIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub ${CompanyName}UnAuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:Get*
                Resource: "*"
  CompanyIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CompanyIdentityPool
      Roles:
        authenticated: !GetAtt CompanyAuthenticatedRole.Arn
        unauthenticated: !GetAtt CompanyUnAuthenticatedRole.Arn
  401Response:
    Type: "AWS::ApiGateway::GatewayResponse"
    Properties:
      ResponseParameters:
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
        "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref CompanyRootApi
      StatusCode: "401"
  CompanyFridgeTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FridgeTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "name"
        AttributeType: "S"
      - AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "id"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFridgeTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFridgeTableWriteThroughput
      LocalSecondaryIndexes:
      - IndexName: "byName"
        KeySchema:
        - AttributeName: "company"
          KeyType: "HASH"
        - AttributeName: "name"
          KeyType: "RANGE"
        Projection:
          ProjectionType: "ALL"
  CompanyFridgeTaskTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FridgeTaskTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "id"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFridgeTaskTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFridgeTaskTableWriteThroughput
  CompanyFridgeLogTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FridgeLogTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFridgeLogTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFridgeLogTableWriteThroughput
  CompanyFreezerTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FreezerTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "name"
        AttributeType: "S"
      - AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "id"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFreezerTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFreezerTableWriteThroughput
      LocalSecondaryIndexes:
      - IndexName: "byName"
        KeySchema:
        - AttributeName: "company"
          KeyType: "HASH"
        - AttributeName: "name"
          KeyType: "RANGE"
        Projection:
          ProjectionType: "ALL"
  CompanyFreezerTaskTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FreezerTaskTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "id"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFreezerTaskTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFreezerTaskTableWriteThroughput
  CompanyFreezerLogTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FreezerLogTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFreezerLogTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFreezerLogTableWriteThroughput
  CompanyFoodItemTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FoodItemTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      - AttributeName: "expiryDate"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFoodItemTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFoodItemTableWriteThroughput
      LocalSecondaryIndexes:
      - IndexName: "byExpiryDate"
        KeySchema:
        - AttributeName: "company"
          KeyType: "HASH"
        - AttributeName: "expiryDate"
          KeyType: "RANGE"
        Projection:
          ProjectionType: "ALL"
  CompanyHotHoldingTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}HotHoldingTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyHotHoldingTableReadThroughput
        WriteCapacityUnits: !Ref CompanyHotHoldingTableWriteThroughput
  CompanyFastCoolingTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}FastCoolingTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyFastCoolingTableReadThroughput
        WriteCapacityUnits: !Ref CompanyFastCoolingTableWriteThroughput
  CompanySupplierTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}SupplierTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "name"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "name"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanySupplierTableReadThroughput
        WriteCapacityUnits: !Ref CompanySupplierTableWriteThroughput
  CompanyUserTrainingLogTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}UserTrainingLogTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyUserTrainingLogTableReadThroughput
        WriteCapacityUnits: !Ref CompanyUserTrainingLogTableWriteThroughput
  CompanyUserMedicalLogTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${CompanyName}UserMedicalLogTable
      AttributeDefinitions:
      - AttributeName: "company"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "company"
        KeyType: "HASH"
      - AttributeName: "createdAt"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref CompanyUserMedicalLogTableReadThroughput
        WriteCapacityUnits: !Ref CompanyUserMedicalLogTableWriteThroughput
