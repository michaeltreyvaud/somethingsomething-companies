{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Infrastructre for a specific Company",
  "Parameters": {
    "CompanyName": {
      "Description": "The name of the Company",
      "Type": "String",
      "MinLength": 3,
      "AllowedPattern": "[a-zA-Z0-9]+"
    }
  },
  "Resources": {
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${CompanyName}ApiLambdaRole"
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "LambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": {
          "Fn::Sub": "${CompanyName}ApiLambdaPolicy"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}ApiLambda"
                },
                {
                  "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CompanyName}ApiLambda*:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "apigateway:POST",
                "apigateway:GetResources",
                "apigateway:DELETE"
              ],
              "Resource": [
                {
                  "Fn::Sub": "*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "CompanyLambda": {
      "DependsOn": [
        "LambdaRole",
        "LambdaPolicy"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "somethingsomething-company-bucket",
          "S3Key": "helloWorld.zip"
        },
        "Description": "API lambda for specific company",
        "Environment": {
          "Variables": {
            "NODE_ENV": "production"
          }
        },
        "FunctionName": {
          "Fn::Sub": "${CompanyName}ApiLambda"
        },
        "Handler": "src/handlers/api.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30
      }
    },
    "CompanyLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "CompanyLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*"
        }
      }
    },
    "CompanyRootAPIGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Sub": "${CompanyName}Api"
        },
        "Description": "Api Gateway for a specific Company"
      }
    },
    "CompanyResourceProxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "CompanyRootAPIGateway",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "CompanyRootAPIGateway"
        },
        "PathPart": "{proxy+}"
      }
    },
    "CompanyMethods": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "CompanyRootAPIGateway"
        },
        "ResourceId": {
          "Ref": "CompanyResourceProxy"
        },
        "HttpMethod": "ANY",
        "AuthorizationType": "AWS_IAM",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompanyLambda.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "CompanyOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "RestApiId": {
          "Ref": "CompanyRootAPIGateway"
        },
        "ResourceId": {
          "Ref": "CompanyResourceProxy"
        },
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "ApiGatewayDeployment": {
      "DependsOn": [
        "CompanyResourceProxy",
        "CompanyMethods",
        "CompanyOptions"
      ],
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "CompanyRootAPIGateway"
        },
        "StageName": "dev"
      }
    }
  }
}
